import Architecture
import Network

public actor Client: Scene {
    public init() { }
    
    public func execute() async throws {
        let request: [UInt8] = [0x47, 0x45, 0x54, 0x20, 0x2f, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x34, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x53, 0x65, 0x63, 0x2d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x2d, 0x53, 0x69, 0x74, 0x65, 0x3a, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x0d, 0x0a, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x20, 0x31, 0x0d, 0x0a, 0x53, 0x65, 0x63, 0x2d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x2d, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x2c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x2b, 0x78, 0x6d, 0x6c, 0x2c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x6d, 0x6c, 0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x39, 0x2c, 0x2a, 0x2f, 0x2a, 0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x38, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x4d, 0x61, 0x63, 0x69, 0x6e, 0x74, 0x6f, 0x73, 0x68, 0x3b, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x20, 0x4f, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x5f, 0x31, 0x35, 0x5f, 0x37, 0x29, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x69, 0x74, 0x2f, 0x36, 0x30, 0x35, 0x2e, 0x31, 0x2e, 0x31, 0x35, 0x20, 0x28, 0x4b, 0x48, 0x54, 0x4d, 0x4c, 0x2c, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x47, 0x65, 0x63, 0x6b, 0x6f, 0x29, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x31, 0x36, 0x2e, 0x34, 0x20, 0x53, 0x61, 0x66, 0x61, 0x72, 0x69, 0x2f, 0x36, 0x30, 0x35, 0x2e, 0x31, 0x2e, 0x31, 0x35, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x65, 0x6e, 0x2d, 0x47, 0x42, 0x2c, 0x65, 0x6e, 0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x39, 0x0d, 0x0a, 0x53, 0x65, 0x63, 0x2d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x2d, 0x44, 0x65, 0x73, 0x74, 0x3a, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x67, 0x7a, 0x69, 0x70, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x0d, 0x0a, 0x0d, 0x0a]
        
        let socket = try await TCP.Socket().connect(to: "127.0.0.1", port: 4000)
        let written = try await socket.send(bytes: request)
        let response = try await socket.receive(maxLength: 1024)
        print("response", "\n", response.string)
        /*
        while true {
            let socket = try await TCP.Socket().connect(to: "127.0.0.1", port: 3000)

            let written = try await socket.send(bytes: message)
            let response = try await socket.receive(maxLength: message.count)
        }
         */
    }
}

/*
HTTP/1.1 200 OK
Content-Type: text/html; encoding=utf8
Content-Length: 6
Connection: close

hello
*/

public actor Server: Scene {
    public init() { }
    
    public func execute() async throws {
        let response: [UInt8] = [0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x75, 0x74, 0x66, 0x38, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x36, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x0a, 0x0a, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x0a]
        
        
        let socket = try TCP.Socket().bind(to: "127.0.0.1", port: 4000).listen()
        
        while true {
            do {
                let client = try await socket.accept()
                let bytes = try await client.receive(maxLength: 1024)
                print("request", "\n", bytes.string)
                _ = try await client.send(bytes: response)
                try client.close()
            } catch {
                break
            }
        }
    }
}

public actor Reader {
    @discardableResult
    public func readLine(handler: @escaping Handler) async -> Self {
        self.handler = handler
        return self
    }
    
    public typealias Handler = (String) async throws -> Void
    
    lazy var handler: Handler = { _ in }
    
    public init() { }
    
    public func start() async throws {
        while true {
            guard let string = Swift.readLine() else { return }
            try await self.handler(string)
        }
    }
}

extension Array where Element == UInt8 {
    func hex(uppercase: Bool = false) -> String {
        let map = uppercase ? "0123456789ABCDEF" : "0123456789abcdef"
        
        var scalars: [UnicodeScalar] = []
        
        var iterator = map.utf16.makeIterator()
        var decoder = UTF16()
        
        Decode: while true {
            switch decoder.decode(&iterator) {
            case .scalarValue(let value): scalars.append(value)
            case .emptyInput: break Decode
            case .error: break Decode
            }
        }
        
        var string = ""
        string.unicodeScalars.append(UnicodeScalar(0x5b))//[
        
        var index = 0
        for byte in self {
            string.unicodeScalars.append(UnicodeScalar(0x30))//0
            string.unicodeScalars.append(UnicodeScalar(0x78))//x
            
            string.unicodeScalars.append(scalars[Int(byte / 16)])
            index += 1
            string.unicodeScalars.append(scalars[Int(byte % 16)])
            index += 1
            
            string.unicodeScalars.append(UnicodeScalar(0x2c))//,
            string.unicodeScalars.append(UnicodeScalar(0x20))//
        }
        string.unicodeScalars.append(UnicodeScalar(0x5d))//]
        
        return string
    }
    
    var string: String {
        var string = ""
        for byte in self {
            string.unicodeScalars.append(UnicodeScalar(byte))
        }
        return string
    }
}
